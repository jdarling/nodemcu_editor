var SerialPort = require('serialport').SerialPort;var async = require('async');var resetNode = function(request, reply){  this.serialPort.write("node.restart();\r\n", function(err, results) {      if(err){        this.sockets.broadcast('socket::error', err);        return reply(err);      }      reply(results);    }.bind(this));};var putData = function(request, reply){  var cmds = request.payload.split('\n');  var results = [];  var serialPort = this.serialPort;  var sockets = this.sockets;  async.eachSeries(cmds, function(cmd, next){    if(!cmd){      return next();    }    serialPort.write(cmd+"\n", function(err, result) {      console.log(cmd, '->', err || result);      if(err){        sockets.broadcast('socket::error', err);        results.push(err);        return next(err);      }      console.log(cmd.length);      if(cmd.length+1 !== result){        var err = new Error('Failed to write: '+cmd);        sockets.broadcast('socket::error', err);        results.push(err);        return next(err);      }      results.push(result);      setTimeout(next, 250);    });  }, function(){    reply(results);  });};module.exports = function(options, next){  var server = options.hapi;  var sockets = options.sockets;  var logger = options.logger;  var config = options.config;  logger.info('Serial port init: ', config);  var serialPort = new SerialPort(config.port, config);  serialPort.on('open', function(){    serialPort.on('data', function(data){      var str = data.toString();      logger.info(str);      sockets.broadcast('serial::data', str);    });    serialPort.write("node.restart();\r\n", function(err, results) {      if(err){        return sockets.broadcast('socket::error', err);      }    });  });  server.route([    {      method: 'POST',      path: '/api/v1/serial/reset',      handler: resetNode.bind({          serialPort: serialPort,          sockets: sockets        })    },    {      method: 'POST',      path: '/api/v1/serial/put',      handler: putData.bind({          serialPort: serialPort,          sockets: sockets        })    }  ]);  next();};