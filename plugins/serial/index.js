var SerialPort = require('serialport').SerialPort;var async = require('async');var noop = function(){};var serialWrite = function(options, callback){  var cmds = options.data.split('\n');  var results = [];  var serialPort = options.serialPort;  var sockets = options.sockets;  var logger = options.logger;  callback = callback || noop;  async.eachSeries(cmds, function(cmd, next){    if(!cmd){      return next();    }    serialPort.write(cmd+"\n", function(err, result) {      logger.info(cmd, '->', err || result);      if(err){        sockets.broadcast('socket::error', err);        return callback(err);      }      logger.info(cmd.length);      if(cmd.length+1 !== result){        var err = new Error('Failed to write: '+cmd);        sockets.broadcast('socket::error', err);        return callback(err);      }      results.push(result);      setTimeout(next, 250);    });  }, function(){    callback(null, results);  });};var resetNode = function(request, reply){  serialWrite({    serialPort: this.serialPort,    sockets: this.sockets,    logger: this.logger,    data: 'node.restart();'  }, function(err, results){    return reply(err||results);  });};var putData = function(request, reply){  serialWrite({    serialPort: this.serialPort,    sockets: this.sockets,    logger: this.logger,    data: request.payload,  }, function(err, results){    return reply(err||results);  });};module.exports = function(options, next){  var server = options.hapi;  var sockets = options.sockets;  var logger = options.logger;  var config = options.config;  logger.info('Serial port init: ', config);  var serialPort = new SerialPort(config.port, config);  serialPort.on('open', function(){    serialPort.on('data', function(data){      var str = data.toString();      logger.info(str);      sockets.broadcast('serial::data', str);    });    serialWrite({      serialPort: serialPort,      sockets: sockets,      logger: logger,      data: 'node.restart();'    });  });  sockets.on('serial::write', function(data, socket, callback){    serialWrite({      serialPort: serialPort,      sockets: sockets,      logger: logger,      data: data    }, callback);  });  server.route([    {      method: 'POST',      path: '/api/v1/serial/reset',      handler: resetNode.bind({          serialPort: serialPort,          logger: logger,          sockets: sockets        })    },    {      method: 'POST',      path: '/api/v1/serial/put',      handler: putData.bind({          serialPort: serialPort,          logger: logger,          sockets: sockets        })    }  ]);  next();};