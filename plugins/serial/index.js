var SerialPort = require('serialport').SerialPort;var async = require('async');var utils = require('../../lib/utils');var noop = function(){};var rePrompt = /\r\n(>||>>)[ \t\r\n]+$/;var serialWrite = function(options, callback){  var cmds = options.data.split('\n');  var results = [];  var serialPort = options.serialPort;  var sockets = options.sockets;  var logger = options.logger;  callback = callback || noop;  var buffer = '';  var push = function(data){    buffer += data.toString();  };  var awaitPrompt = function(callback){    if(buffer.match(rePrompt)){      buffer = '';      return callback();    }    setImmediate(function(){      awaitPrompt(callback);    });  };  serialPort.addListener('data', push);  async.eachSeries(cmds, function(cmd, next){    if(!cmd){      return next();    }    serialPort.write(cmd+"\n", function(err, result){      if(err){        sockets.broadcast('socket::error', err);        return callback(err);      }      if(cmd.length+1 !== result){        var err = new Error('Failed to write: '+cmd);        sockets.broadcast('socket::error', err);        return callback(err);      }      results.push(result);      options.skipPrompt?setTimeout(next, options.lineWait||250):awaitPrompt(next);    });  }, function(){    serialPort.removeListener('data', push);    callback(null, results);  });};var captureBlock = function(options, callback){  var serialPort = options.serialPort;  var sockets = options.sockets;  var logger = options.logger;  var blockStart = options.blockStart;  var blockEnd = options.blockEnd;  var command = options.command;  var inFile = false;  var buffer = '';  var timeout;  var errored = false;  var capture = function(data){    if(timeout){      clearTimeout(timeout);      timeout = false;    }    buffer += data.toString();    var commandIndex = buffer.indexOf(command)+command.length;    if(commandIndex>-1){      var end = buffer.indexOf(blockEnd, commandIndex);      if(end>-1){        stopListening();        var start = buffer.indexOf(blockStart, commandIndex)+blockStart.length;        return callback(null, buffer.substr(start, end-start));      }    }    timeout = setTimeout(function(){      errored = true;      stopListening();      return callback(new Error('Timeout before answer completed.'));    }, 1000);  };  var stopListening = function(){    if(timeout){      clearTimeout(timeout);      timeout = false;    }    serialPort.removeListener('data', capture);  };  var startListening = function(){    serialPort.addListener('data', capture);  };  startListening();  serialWrite({      serialPort: serialPort,      sockets: sockets,      logger: logger,      data: command,      //skipPrompt: true,    });};var getFileContents = function(options, callback){  var fileName = options.fileName;  var fileStart = '--[[--cat '+fileName+' start--]]';  var fileEnd = '--[[--cat '+fileName+' done--]]';  captureBlock(utils.defaults({      blockStart: fileStart,      blockEnd: fileEnd,      command: 'file.open("'+fileName+'", "r"); print("'+fileStart+'" .. file.read() .. "'+fileEnd+'"); file.close()'    }, options), callback)};var getFilesListing = function(options, callback){  var start = '--[[--ls start--]]';  var end = '--[[--ls done--]]';  captureBlock(utils.defaults({      blockStart: start,      blockEnd: end,      command: 'print("'+start+'"); for k,v in pairs(file.list()) do l = string.format("%-15s",k) print(l.."   "..v.." bytes") end print("'+end+'");'    }, options), function(err, result){      if(err){        return callback(err);      }      var listing = result.replace(/\r\n/g, '\n').split('\n').filter(function(s){        return !!s;      }).map(function(line){        var info = line.split(/[ \t]+/g);        var size = info.splice(info.length-2, 2).join(' ');        return {          fileName: info.join(' '),          size: size        };      });      return callback(null, listing);    });};var resetNode = function(request, reply){  serialWrite({    serialPort: this.serialPort,    sockets: this.sockets,    logger: this.logger,    data: 'node.restart();'  }, function(err, results){    if(err){      return reply({error: err.toString()});    }    return reply(results);  });};var putData = function(request, reply){  serialWrite({    serialPort: this.serialPort,    sockets: this.sockets,    logger: this.logger,    data: request.payload,  }, function(err, results){    if(err){      return reply({error: err.toString()});    }    return reply(results);  });};var getFile = function(request, reply){  getFileContents({    serialPort: this.serialPort,    sockets: this.sockets,    logger: this.logger,    fileName: request.params.fileName,  }, function(err, results){    if(err){      return reply({error: err.toString()});    }    return reply(results);  });};var saveFile = function(request, reply){  var fileName = request.params.fileName;  var src = request.payload.split('\n');  var script = src.map(function(line){    return 'file.writeline('+JSON.stringify(line)+');';  }).join('\n');  script = 'file.open("'+fileName+'", "w");\n'+    script+    'file.close();';  serialWrite({    serialPort: this.serialPort,    sockets: this.sockets,    logger: this.logger,    data: script,  }, function(err, results){    if(err){      return reply({error: err.toString()});    }    return reply(results);  });};var deleteFile = function(request, reply){  var fileName = request.params.fileName;  var script = 'file.remove("'+fileName+'");';  serialWrite({    serialPort: this.serialPort,    sockets: this.sockets,    logger: this.logger,    data: script,  }, function(err, results){    if(err){      return reply({error: err.toString()});    }    return reply(results);  });};var listFiles = function(request, reply){  getFilesListing({    serialPort: this.serialPort,    sockets: this.sockets,    logger: this.logger  }, function(err, results){    if(err){      return reply({error: err.toString()});    }    return reply(results);  });};module.exports = function(options, next){  var server = options.hapi;  var sockets = options.sockets;  var logger = options.logger;  var config = options.config;  logger.info('Serial port init: ', config);  var serialPort = new SerialPort(config.port, config);  serialPort.on('open', function(){    serialPort.on('data', function(data){      var str = data.toString();      sockets.broadcast('serial::data', str);    });    serialWrite({      serialPort: serialPort,      sockets: sockets,      logger: logger,      data: 'node.restart();'    });  });  sockets.on('serial::write', function(data, socket, callback){    serialWrite({      serialPort: serialPort,      sockets: sockets,      logger: logger,      data: data    }, callback);  });  sockets.on('file::get', function(data, socket, callback){    getFileContents({      serialPort: serialPort,      sockets: sockets,      logger: logger,      fileName: data,    }, callback);  });  server.route([    {      method: 'POST',      path: '/api/v1/serial/reset',      handler: resetNode.bind({          serialPort: serialPort,          logger: logger,          sockets: sockets        })    },    {      method: 'POST',      path: '/api/v1/serial/put',      handler: putData.bind({          serialPort: serialPort,          logger: logger,          sockets: sockets        })    },    {      method: 'GET',      path: '/api/v1/file/{fileName*}',      handler: getFile.bind({          serialPort: serialPort,          logger: logger,          sockets: sockets        })    },    {      method: 'POST',      path: '/api/v1/file/{fileName*}',      handler: saveFile.bind({          serialPort: serialPort,          logger: logger,          sockets: sockets        })    },    {      method: 'DELETE',      path: '/api/v1/file/{fileName*}',      handler: deleteFile.bind({          serialPort: serialPort,          logger: logger,          sockets: sockets        })    },    {      method: 'GET',      path: '/api/v1/files',      handler: listFiles.bind({          serialPort: serialPort,          logger: logger,          sockets: sockets        })    },  ]);  next();};